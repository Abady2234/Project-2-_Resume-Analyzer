# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TPvyuYzWl7Ia97mwZR9Jd3FgO5ZSCAOd
"""

# -*- coding: utf-8 -*-
"""Resume Analyzer with Percentage Job Matching"""

import os
import re
import sys
import PyPDF2
from docx import Document
from IPython.display import display, FileLink

# ===== Environment Setup =====
try:
    from google.colab import files as colab_files
    IN_COLAB = True
except:
    IN_COLAB = False

def setup_environment():
    """Install required libraries if not already installed"""
    required_libraries = {
        'PyPDF2': 'pypdf2',
        'python-docx': 'python-docx'
    }

    for lib, pkg in required_libraries.items():
        try:
            __import__(lib)
        except ImportError:
            print(f"Installing {lib}...")
            import subprocess
            subprocess.check_call([sys.executable, "-m", "pip", "install", pkg])

setup_environment()

# ===== File Reading Utilities =====
class ResumeReader:
    """Handles reading different file formats"""

    @staticmethod
    def read_pdf(file_path):
        """Extract text from PDF files"""
        text = ""
        with open(file_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            for page in reader.pages:
                text += page.extract_text()
        return text

    @staticmethod
    def read_docx(file_path):
        """Extract text from DOCX files"""
        doc = Document(file_path)
        return "\n".join([para.text for para in doc.paragraphs])

# ===== Information Extraction =====
class InfoExtractor:
    """Core information extraction methods"""

    @staticmethod
    def extract_skills(text, skills_list):
        """Identify skills from text based on predefined list"""
        found_skills = []
        for skill in skills_list:
            if re.search(rf'\b{re.escape(skill)}\b', text, re.IGNORECASE):
                found_skills.append(skill)
        return found_skills

class EnhancedInfoExtractor:
    """Advanced information extraction with multiple patterns"""

    @staticmethod
    def extract_name(text):
        """Extract name using multiple matching patterns"""
        patterns = [
            r'(Name|NAME|name)[:\s]*([A-Za-z]+\s[A-Za-z]+)',
            r'([A-Z][a-z]+)\s+([A-Z][a-z]+)',
            r'^([A-Za-z]+\s[A-Za-z]+)\n',
            r'Contact.*\n.*?([A-Za-z]+\s[A-Za-z]+)'
        ]

        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return match.group(match.lastindex if match.lastindex else 0).strip()
        return "Not Found"

    @staticmethod
    def extract_contact_info(text):
        """Extract email, phone, and LinkedIn information"""
        result = {
            'email': "Not Found",
            'phone': "Not Found",
            'linkedin': "Not Found"
        }

        email_match = re.search(r'[\w\.-]+@[\w\.-]+\.\w+', text)
        if email_match:
            result['email'] = email_match.group()

        phone_match = re.search(r'(\+?\d[\d\s-]{7,}\d)', text)
        if phone_match:
            result['phone'] = phone_match.group()

        linkedin_match = re.search(r'(linkedin\.com/in/[\w-]+)', text, re.IGNORECASE)
        if linkedin_match:
            result['linkedin'] = f"https://{linkedin_match.group()}"

        return result

    @staticmethod
    def extract_education(text):
        """Extract education qualifications"""
        education = []
        patterns = [
            r'(Education|EDUCATION|education)[:\s]*(.*?)(?=\n\w|\Z)',
            r'(University|College|UNIVERSITY|COLLEGE).*?\n(.*?)\n'
        ]

        for pattern in patterns:
            matches = re.finditer(pattern, text, re.DOTALL)
            for match in matches:
                education.append(match.group(2).strip())

        return education if education else ["Not Specified"]

# ===== Job Matching with Percentage =====
class JobMatcher:
    """Calculates job suitability with percentage scores"""

    def __init__(self):
        self.job_requirements = {
            "Data Scientist": ["Python", "Machine Learning", "Data Analysis", "SQL", "Statistics"],
            "Software Engineer": ["Java", "C++", "Python", "Git", "Algorithms"],
            "DevOps Engineer": ["Docker", "AWS", "Linux", "Git", "CI/CD"],
            "Business Analyst": ["Excel", "Tableau", "Data Analysis", "SQL", "Power BI"],
            "Web Developer": ["JavaScript", "HTML", "CSS", "React", "Node.js"]
        }

    def match_jobs(self, skills):
        """Calculate percentage match for each job"""
        matches = {}
        for job, req_skills in self.job_requirements.items():
            matched_skills = [skill for skill in skills if skill in req_skills]
            match_percentage = (len(matched_skills) / len(req_skills)) * 100
            matches[job] = {
                'percentage': round(match_percentage, 1),
                'matched_skills': matched_skills,
                'missing_skills': [skill for skill in req_skills if skill not in skills]
            }
        return dict(sorted(matches.items(), key=lambda item: item[1]['percentage'], reverse=True))

# ===== Main Analyzer Class =====
class AdvancedResumeAnalyzer:
    """Primary interface for resume analysis"""

    def __init__(self):
        self.skills_list = [
            "Python", "Java", "C++", "JavaScript", "SQL", "HTML", "CSS",
            "Git", "Docker", "AWS", "Machine Learning", "React", "Node.js",
            "Data Analysis", "Excel", "Tableau", "Linux", "Statistics",
            "Algorithms", "CI/CD", "Power BI"
        ]
        self.job_matcher = JobMatcher()

    def analyze(self, file_path):
        """Process resume file and generate analysis"""
        try:
            if file_path.endswith(".pdf"):
                text = ResumeReader.read_pdf(file_path)
            elif file_path.endswith(".docx"):
                text = ResumeReader.read_docx(file_path)
            else:
                raise ValueError("Unsupported file format. Please use PDF or DOCX")

            name = EnhancedInfoExtractor.extract_name(text)
            contact = EnhancedInfoExtractor.extract_contact_info(text)
            skills = InfoExtractor.extract_skills(text, self.skills_list)
            education = EnhancedInfoExtractor.extract_education(text)
            job_matches = self.job_matcher.match_jobs(skills)

            self.display_results(name, contact, skills, education, job_matches)

        except Exception as e:
            print(f"\nError: {str(e)}")
            print("Please check your file and try again")

    def display_results(self, name, contact, skills, education, job_matches):
        """Format and display analysis results with percentage matching"""
        print("\n" + "="*50)
        print("=== RESUME ANALYSIS RESULTS ===".center(50))
        print("="*50)

        print(f"\n► Personal Information:")
        print(f"  • Name: {name}")
        print(f"  • Email: {contact['email']}")
        print(f"  • Phone: {contact['phone']}")
        print(f"  • LinkedIn: {contact['linkedin']}")

        print(f"\n► Education:")
        for edu in education:
            print(f"  • {edu}")

        print(f"\n► Skills Found ({len(skills)}):")
        print("  " + ", ".join(skills) if skills else "  No skills detected")

        print("\n► Job Matching Percentage:")
        for job, match_data in job_matches.items():
            print(f"\n  {job}:")
            print(f"    █ Match: {match_data['percentage']}%")
            print(f"    ✓ Matched Skills: {', '.join(match_data['matched_skills']) or 'None'}")
            if match_data['missing_skills']:
                print(f"    ✗ Missing Skills: {', '.join(match_data['missing_skills'])}")

        print("\n" + "="*50)
        print("=== ANALYSIS COMPLETE ===".center(50))
        print("="*50 + "\n")

# ===== Main Execution =====
if __name__ == "__main__":
    print("\n" + "="*50)
    print("WELCOME TO RESUME ANALYZER".center(50))
    print("="*50)

    if IN_COLAB:
        print("\nPlease upload your resume file (PDF or DOCX):")
        uploaded = colab_files.upload()
        file_path = list(uploaded.keys())[0]
    elif 'ipykernel' in sys.modules:
        print("\nPlease upload your resume file using this link:")
        display(FileLink("resume.pdf"))
        file_path = input("After uploading, enter the file name (e.g., resume.pdf): ")
    else:
        file_path = "resume.pdf"
        if not os.path.exists(file_path):
            print("\nDefault file 'resume.pdf' not found.")
            file_path = input("Please enter your resume file path: ")

    analyzer = AdvancedResumeAnalyzer()
    analyzer.analyze(file_path)